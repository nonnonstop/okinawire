import pigpio
import time


class IrCodeGenerator:
    pass


class IrCodeGeneratorNec(IrCodeGenerator):
    BASE_PULSES = [
        [  # data0
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18 + 562 * 1),  # T + T
        ],
        [  # data1
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18 + 562 * 3),  # T + 3T
        ],
        [  # leader
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),  # 1T
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),  # 2T
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),  # 3T
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),  # 4T
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),  # 5T
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),  # 6T
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),  # 7T
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),  # 8T
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),  # 9T
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),  # 10T
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),  # 11T
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),  # 12T
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),  # 13T
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),  # 14T
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),  # 15T
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18 + 562 * 8),  # 16T + 8T
        ],
        [  # end
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18 + 562 * 4),  # T + 4T
        ],
    ]

    def __init__(self):
        self.pulses = []

    def _generate_byte(self, code):
        pulses = self.pulses
        for _ in range(8):
            if (code & 1) == 0:
                pulses.append(0)
            else:
                pulses.append(1)
            code >>= 1

    def generate(self, data):
        pulses = self.pulses
        pulses.clear()
        pulses.append(2)
        self._generate_byte(data[0])
        self._generate_byte(data[1])
        self._generate_byte(data[2])
        self._generate_byte(~data[2])
        pulses.append(3)


class IrCodeGeneratorAeha(IrCodeGenerator):
    BASE_PULSES = [
        [  # data0
            (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18 + 425 * 1),  # T + T
        ],
        [  # data1
            (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18 + 425 * 3),  # T + 3T
        ],
        [  # leader
            (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18),  # T
            (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18),  # 2T
            (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18),  # 3T
            (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18),  # 4T
            (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18),  # 5T
            (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18),  # 6T
            (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18),  # 7T
            (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18 + 425 * 4),  # 8T + 4T
        ],
        [  # end
            (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18),
            (8, 18), (8, 18), (8, 18), (8, 18 + 425 * 4),  # T + 8000us
        ],
    ]

    def __init__(self):
        self.pulses = []

    def _generate_byte(self, code):
        pulses = self.pulses
        for _ in range(8):
            if (code & 1) == 0:
                pulses.append(0)
            else:
                pulses.append(1)
            code >>= 1

    def generate(self, data):
        pulses = self.pulses
        pulses.clear()
        pulses.append(2)
        for d in data:
            self._generate_byte(d)
        pulses.append(3)


class IrTransmitter:
    def __init__(self, pi, gpio):
        self._pi = pi
        self._gpio = gpio

    def __enter__(self):
        self.start()
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        self.stop()

    def start(self):
        self._pi.set_mode(self._gpio, pigpio.OUTPUT)

    def stop(self):
        pass

    def transmit(self, generator):
        gpio_bit = 1 << self._gpio
        self._pi.wave_clear()
        base_pulse_map = []
        for base_pulse in generator.BASE_PULSES:
            pulses = []
            for pulse_high, pulse_low in base_pulse:
                pulses.append(pigpio.pulse(gpio_bit, 0, pulse_high))
                pulses.append(pigpio.pulse(0, gpio_bit, pulse_low))
            self._pi.wave_add_generic(pulses)
            base_pulse_map.append(self._pi.wave_create())
        pulses = [base_pulse_map[pulse] for pulse in generator.pulses]
        self._pi.wave_chain(pulses)
        while self._pi.wave_tx_busy():
            time.sleep(0.1)
        self._pi.wave_tx_stop()
        self._pi.wave_clear()
